#!/usr/bin/perl

#
# makefaces ver2.1
#
# This is a perl script for making face data for Scherzo
# written by Shigeki Nakaura on Tue Jul  1 16:52:59 2003
#
# This script was originally written by Masaaki Hara.
#

$PI=3.1415926535897932384626433832795028841971693993751;

sub roll {
    local ($x0, $y0, $z0);
    $x0 = $_[0];
    $y0 = $_[1];
    $z0 = $_[2];

    $x = (cos($roll_y)*cos($roll_z)) * $x0 + 
	(cos($roll_z)*sin($roll_x)*sin($roll_y)+cos($roll_x)*sin($roll_z)) *
	$y0 +
	(-(cos($roll_x)*cos($roll_z)*sin($roll_y))+sin($roll_x)*sin($roll_z)) *
	$z0;
    
    $y = (-(cos($roll_y)*sin($roll_z))) * $x0 +
	(cos($roll_x)*cos($roll_z)-sin($roll_x)*sin($roll_y)*sin($roll_z)) *
	$y0 + 
	(cos($roll_z)*sin($roll_x)+cos($roll_x)*sin($roll_y)*sin($roll_z)) *
	$z0;
    
    $z = (sin($roll_y)) * $x0 +
	(-(cos($roll_y)*sin($roll_x))) * $y0 + 
	(cos($roll_x)*cos($roll_y)) * $z0;
}

sub sub_print {
    &roll($_[0], $_[1], $_[2]);
    $x += $x_center; $y += $y_center; $z += $z_center;
    printf sz ("\t%e\t\%e\t%e\n", $x, $y, $z);
#	print sz "\t$x\t$y\t$z\n";
}

sub input_center {
    print " x 方向の中心位置 : "; $x_center = <STDIN>;
    print " y 方向の中心位置 : "; $y_center = <STDIN>;
    print " z 方向の中心位置 : "; $z_center = <STDIN>;
    chop ($x_center, $y_center, $z_center);
}

sub input_roll {
    print " x 軸周りの回転角 : "; $roll_x = <STDIN>;
    print " y 軸周りの回転角 : "; $roll_y = <STDIN>;
    print " z 軸周りの回転角 : "; $roll_z = <STDIN>;
    chop ($roll_x, $roll_y, $roll_z);
    $roll_x *= ($PI / 180.0);
    $roll_y *= ($PI / 180.0);
    $roll_z *= ($PI / 180.0);
}

sub input_rectangular {
    print " x 軸方向の長さ   : "; $x_length = <STDIN>;
    print " y 軸方向の長さ   : "; $y_length = <STDIN>;
    print " z 軸方向の長さ   : "; $z_length = <STDIN>;
    chop ($x_length, $y_length, $z_length);
    &input_roll();
    &input_center();
}

sub input_cylinder {
    print "半径              : "; $radius = <STDIN>;
    print "高さ              : "; $height = <STDIN>;
    print "分周              : "; $per = <STDIN>;
    chop ($radius, $height, $per);
    &input_roll();
    &input_center();
}

sub input_truncated_corn {
    print "下の半径              : "; $lradius = <STDIN>;
    print "上の半径              : "; $sradius = <STDIN>;
    print "高さ              : "; $height = <STDIN>;
    print "分周              : "; $per = <STDIN>;
    chop ($radius, $height, $per);
    &input_roll();
    &input_center();
}

sub input_elliptic_cylinder {
    print "長径              : "; $lradius = <STDIN>;
    print "短径              : "; $sradius = <STDIN>;
    print "高さ              : "; $height = <STDIN>;
    print "分周              : "; $per = <STDIN>;
    chop ($radius, $height, $per);
    &input_roll();
    &input_center();
}

sub input_sphere {
    print "半径              : "; $radius = <STDIN>;
    print "分周              : "; $per = <STDIN>;
    chop ($radius, $per);
    &input_roll();
    &input_center();
}

sub input_doughnut {
    print "大半径            : "; $radius = <STDIN>;
    print "幅                : "; $width = <STDIN>;
    print "分周              : "; $per = <STDIN>;
    chop ($radius, $width, $per);
    &input_roll();
    &input_center();
}

sub input_koban_cylinder {
    print " x 軸方向の長さ   : "; $x_length = <STDIN>;
    print " y 軸方向の長さ   : "; $y_length = <STDIN>;
    print " z 軸方向の長さ   : "; $z_length = <STDIN>;
    print "分周              : "; $per = <STDIN>;
    chop ($x_length, $y_length, $z_length, $per);
    &input_roll();
    &input_center();
}

sub make_rectangular {
    local ($xl, $xh, $yl, $yh, $zl, $zh, $head, $i, $j, @xx, @yy, @zz);
    $xl = -$x_length / 2;
    $xh =  $x_length / 2;
    $yl = -$y_length / 2;
    $yh =  $y_length / 2;
    $zl = -$z_length / 2;
    $zh =  $z_length / 2;
    
    $head =<<"EO1";
#
#  rectanglar center ($x_center, $y_center, $z_center)
#             length ($x_length, $y_length, $z_length)
#
EO1
	
    @xx = ($xh, $xl, $xl, $xh,  $xh, $xh, $xl, $xl,  $xh, $xh, $xl, $xl, 
	       $xh, $xl, $xl, $xh,  $xh, $xh, $xh, $xh,  $xl, $xl, $xl, $xl);
    
    @yy = ($yh, $yh, $yl, $yl,  $yh, $yl, $yl, $yh,  $yh, $yh, $yh, $yh, 
	   $yl, $yl, $yl, $yl,  $yh, $yl, $yl, $yh,  $yh, $yh, $yl, $yl);
    
    @zz = ($zh, $zh, $zh, $zh,  $zl, $zl, $zl, $zl,  $zh, $zl, $zl, $zh,
	   $zh, $zh, $zl, $zl,  $zh, $zh, $zl, $zl,  $zh, $zl, $zl, $zh);

    print sz $head;
    for ($i = 0; $i < 6; $i++) {
	print sz "face\n";
	for ($j = 0; $j < 4; $j++) {
	    &sub_print($xx[$j + $i * 4], $yy[$j + $i * 4], $zz[$j + $i * 4]);
	}
	print sz "endf\n#\n";
    }
    
}	

sub make_cylinder {
    local ($hh, $hl, $x1, $x2, $y1, $y2, $i, $head);
    $hh = $height / 2;
    $hl = -$height / 2;
    $head =<<"EO2";
#
#   cylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $radius * cos ($PI * 2 / $per * $i);
	$y1 = $radius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, $x1, $y1);
    }
    print sz "endf\n#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $radius * cos ( $PI * 2 / $per * $i);
	$y1 = $radius * sin (-$PI * 2 / $per * $i);
	&sub_print($hl, $x1, $y1);
    }
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $radius * cos ($PI * 2 / $per * $i);
	$y1 = $radius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, $x1, $y1);
	&sub_print($hl, $x1, $y1);
	$x2 = $radius * cos ($PI * 2 / $per * ($i + 1));
	$y2 = $radius * sin ($PI * 2 / $per * ($i + 1));
	&sub_print($hl, $x2, $y2);
	&sub_print($hh, $x2, $y2);
	print sz "endf\n#\n";
    }
}	

sub make_truncated_corn {
    local ($hh, $hl, $x1, $x2, $y1, $y2, $i, $head);
    $hh = $height / 2;
    $hl = -$height / 2;
    $head =<<"EO2";
#
#   cylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $lradius * cos ($PI * 2 / $per * $i);
	$y1 = $lradius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, $x1, $y1);
    }
    print sz "endf\n#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $sradius * cos ( $PI * 2 / $per * $i);
	$y1 = $sradius * sin (-$PI * 2 / $per * $i);
	&sub_print($hl, $x1, $y1);
    }

    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $lradius * cos ($PI * 2 / $per * $i);
	$y1 = $lradius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, $x1, $y1);
	$x1 = $sradius * cos ($PI * 2 / $per * $i);
	$y1 = $sradius * sin ($PI * 2 / $per * $i);
	&sub_print($hl, $x1, $y1);
	$x2 = $sradius * cos ($PI * 2 / $per * ($i + 1));
	$y2 = $sradius * sin ($PI * 2 / $per * ($i + 1));
	&sub_print($hl, $x2, $y2);
	$x2 = $lradius * cos ($PI * 2 / $per * ($i + 1));
	$y2 = $lradius * sin ($PI * 2 / $per * ($i + 1));
	&sub_print($hh, $x2, $y2);
	print sz "endf\n#\n";
    }
}	

sub make_hemicylinder {
    local ($hh, $hl, $x1, $x2, $y1, $y2, $i, $head);
    $hh = $height / 2;
    $hl = -$height / 2;
    $per = int($per / 2);
$head =<<"EO2";
#
#   hemicylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $radius * cos ($PI / $per * $i);
	$y1 = $radius * sin ($PI / $per * $i);
	&sub_print($hh, $x1, $y1);
    }
    print sz "endf\n#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $radius * cos ( $PI / $per * $i - $PI);
	$y1 = $radius * sin (-$PI / $per * $i - $PI);
	&sub_print($hl, $x1, $y1);
    }
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $radius * cos ($PI / $per * $i);
	$y1 = $radius * sin ($PI / $per * $i);
	&sub_print($hh, $x1, $y1);
	&sub_print($hl, $x1, $y1);
	$x2 = $radius * cos ($PI / $per * ($i + 1));
	$y2 = $radius * sin ($PI / $per * ($i + 1));
	&sub_print($hl, $x2, $y2);
	&sub_print($hh, $x2, $y2);
	print sz "endf\n#\n";
    }
    print sz "face\n";
    &sub_print($hh, $radius, 0);
    &sub_print($hh, -$radius, 0);
    &sub_print($hl, -$radius, 0);
    &sub_print($hl, $radius, 0);
    print sz "endf\n#\n";
}

sub make_elliptic_cylinder {
    local ($hh, $hl, $x1, $x2, $y1, $y2, $i, $head);
    $hh = $height / 2;
    $hl = -$height / 2;
    $head =<<"EO2";
#
#   elliptic cylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $lradius * cos ($PI * 2 / $per * $i);
	$y1 = $sradius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, $x1, $y1);
    }
    print sz "endf\n#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $lradius * cos ( $PI * 2 / $per * $i);
	$y1 = $sradius * sin (-$PI * 2 / $per * $i);
	&sub_print($hl, $x1, $y1);
    }
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $lradius * cos ($PI * 2 / $per * $i);
	$y1 = $sradius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, $x1, $y1);
	&sub_print($hl, $x1, $y1);
	$x2 = $lradius * cos ($PI * 2 / $per * ($i + 1));
	$y2 = $sradius * sin ($PI * 2 / $per * ($i + 1));
	&sub_print($hl, $x2, $y2);
	&sub_print($hh, $x2, $y2);
	print sz "endf\n#\n";
    }
}	

sub make_elliptic_hemicylinder {
    local ($hh, $hl, $x1, $x2, $y1, $y2, $i, $head);
    $hh = $height / 2;
    $hl = -$height / 2;
    $per = int($per / 2);
$head =<<"EO2";
#
#   elliptic hemicylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $lradius * cos ($PI / $per * $i);
	$y1 = $sradius * sin ($PI / $per * $i);
	&sub_print($hh, $x1, $y1);
    }
    print sz "endf\n#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $lradius * cos ( $PI / $per * $i - $PI);
	$y1 = $sradius * sin (-$PI / $per * $i - $PI);
	&sub_print($hl, $x1, $y1);
    }
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $lradius * cos ($PI / $per * $i);
	$y1 = $sradius * sin ($PI / $per * $i);
	&sub_print($hh, $x1, $y1);
	&sub_print($hl, $x1, $y1);
	$x2 = $lradius * cos ($PI / $per * ($i + 1));
	$y2 = $sradius * sin ($PI / $per * ($i + 1));
	&sub_print($hl, $x2, $y2);
	&sub_print($hh, $x2, $y2);
	print sz "endf\n#\n";
    }
    print sz "face\n";
    &sub_print($hh, $lradius, 0);
    &sub_print($hh, -$lradius, 0);
    &sub_print($hl, -$lradius, 0);
    &sub_print($hl, $lradius, 0);
    print sz "endf\n#\n";
}

sub make_sphere {
    local ($i, $j, $head, $x1, $x2, $y1, $y2, $z1, $z2, $r1, $r2, $per2);
$head =<<"EO3";
#
#   sphere center ($x_center, $y_center, $z_center)
#          radius ($radius)
#
EO3
    print sz "$head#\n";
    $per2 = int (($per + 1)/ 2);
    for ($i = 0; $i < $per2; $i++) {
	$r1 = $radius * sin ($PI / $per2 * $i);
	$z1 = $radius * cos ($PI / $per2 * $i);
	$r2 = $radius * sin ($PI / $per2 * ($i + 1));
	$z2 = $radius * cos ($PI / $per2 * ($i + 1));
	for ($j = 0; $j < $per; $j++) {
	    print sz "face\n";
	    $x1 = $r1 * cos ($PI * 2 / $per * $j);
	    $y1 = $r1 * sin ($PI * 2 / $per * $j);
	    $x2 = $r1 * cos ($PI * 2 / $per * ($j + 1));
	    $y2 = $r1 * sin ($PI * 2 / $per * ($j + 1));
	    sub_print ($x2, $y2, $z1) if ($i != 0);
	    sub_print ($x1, $y1, $z1);
	    $x1 = $r2 * cos ($PI * 2 / $per * $j);
	    $y1 = $r2 * sin ($PI * 2 / $per * $j);
	    $x2 = $r2 * cos ($PI * 2 / $per * ($j + 1));
	    $y2 = $r2 * sin ($PI * 2 / $per * ($j + 1));
	    sub_print ($x1, $y1, $z2);
	    sub_print ($x2, $y2, $z2) if ($i != ($per2 - 1));
	    print sz "endf\n#\n";
	}
    }
}	

sub make_hemisphere {
    local ($i, $j, $head, $x1, $x2, $y1, $y2, $z1, $z2, $r1, $r2, $per2);
$head =<<"EO4";
#
#   hemisphere center ($x_center, $y_center, $z_center)
#              radius ($radius)
#
EO4
    print sz "$head#\n";
    $per2 = int($per / 2);
    for ($i = 0; $i < $per2; $i++) {
	$r1 = $radius * sin ($PI / 2 / $per2 * $i);
	$z1 = $radius * cos ($PI / 2 / $per2 * $i);
	$r2 = $radius * sin ($PI / 2 / $per2 * ($i + 1));
	$z2 = $radius * cos ($PI / 2 / $per2 * ($i + 1));
	for ($j = 0; $j < $per; $j++) {
	    print sz "face\n";
	    $x1 = $r1 * cos ($PI * 2 / $per * $j);
	    $y1 = $r1 * sin ($PI * 2 / $per * $j);
	    $x2 = $r1 * cos ($PI * 2 / $per * ($j + 1));
	    $y2 = $r1 * sin ($PI * 2 / $per * ($j + 1));
	    sub_print ($x2, $y2, $z1) if ($i != 0);
	    sub_print ($x1, $y1, $z1);
	    $x1 = $r2 * cos ($PI * 2 / $per * $j);
	    $y1 = $r2 * sin ($PI * 2 / $per * $j);
	    $x2 = $r2 * cos ($PI * 2 / $per * ($j + 1));
	    $y2 = $r2 * sin ($PI * 2 / $per * ($j + 1));
	    sub_print ($x1, $y1, $z2);
	    sub_print ($x2, $y2, $z2);
	    print sz "endf\n#\n";
	}
    }
    print sz "face\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $radius * cos ( $PI * 2 / $per * $i);
	$y1 = $radius * sin (-$PI * 2 / $per * $i);
	sub_print ($x1, $y1, 0);
    }
print sz "endf\n#\n";
}	

sub make_cone {
    local ($hh, $hl, $x1, $x2, $y1, $y2, $i, $head);
    $hh = $height;
    $hl = 0;
$head =<<"EO5";
#
#   cone center ($x_center, $y_center, $z_center)
#        radius ($radius), height ($height)
#
EO5
    print sz "$head#\nface\n";
    for ($i = 0; $i < $per; $i++) {
	$x1 = $radius * cos ( $PI * 2 / $per * $i);
	$y1 = $radius * sin (-$PI * 2 / $per * $i);
	&sub_print($hl, $x1, $y1);
    }
    print sz "endf\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $radius * cos ($PI * 2 / $per * $i);
	$y1 = $radius * sin ($PI * 2 / $per * $i);
	&sub_print($hh, 0, 0);
	&sub_print($hl, $x1, $y1);
	$x2 = $radius * cos ($PI * 2 / $per * ($i + 1));
	$y2 = $radius * sin ($PI * 2 / $per * ($i + 1));
	&sub_print($hl, $x2, $y2);
	print sz "endf\n#\n";
    }
}	

sub make_doughnut {
    local ($i, $j, $head, $x1, $x2, $y1, $y2, $z1, $z2, $r1, $r2, $per2);
$head =<<"EO6";
#
#   doughnut center ($x_center, $y_center, $z_center)
#            radius ($radius), width($width)
#
EO6
    print sz "$head#\n";
    for ($i = 0; $i < $per; $i++) {
	for ($j = 0; $j < $per; $j++) {
	    $x1 = $width * cos ($PI * 2/ $per * $j);
	    $x2 = $width * cos ($PI * 2/ $per * ($j + 1));
	    $z1 = $width * sin ($PI * 2/ $per * $j) + $radius;
	    $z2 = $width * sin ($PI * 2/ $per * ($j + 1)) + $radius;
	    print sz "face\n";
	    sub_print ($x1, $z1 * cos ($PI * 2/ $per * $i), 
		       $z1 * sin ($PI * 2/ $per * $i));
	    sub_print ($x2, $z2 * cos ($PI * 2/ $per * $i), 
		       $z2 * sin ($PI * 2/ $per * $i));
	    sub_print ($x2, $z2 * cos ($PI * 2/ $per * ($i + 1)), 
		       $z2 * sin ($PI * 2/ $per * ($i + 1)));
	    sub_print ($x1, $z1 * cos ($PI * 2/ $per * ($i + 1)),
		       $z1 * sin ($PI * 2/ $per * ($i + 1)));
	    print sz "endf\n#\n";
	}
    }
}

sub make_koban_cylinder {
    local ($xl, $xh, $yl, $yh, $zl, $zh, $r, $x1, $x2, $y1, $y2, $head, $i);
    $xl = -$x_length / 2;
    $xh =  $x_length / 2;
    $yl = -$y_length / 2;
    $yh =  $y_length / 2;
    $r  =  $y_length / 2;
    $zl = -$z_length / 2 + $r;
    $zh =  $z_length / 2 - $r;

    $head =<<"EO2";
#
#   koban cylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $r * cos ($PI / $per * $i);
	$y1 = $r * sin ($PI / $per * $i) + $zh;
	&sub_print($xh, $x1, $y1);
    }
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $r * cos ($PI / $per * $i + $PI);
	$y1 = $r * sin ($PI / $per * $i + $PI) + $zl;
	&sub_print($xh, $x1, $y1);
    }
    print sz "endf\n#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $r * cos ( $PI / $per * $i - $PI);
	$y1 = $r * sin (-$PI / $per * $i - $PI) + $zh;
	&sub_print($xl, $x1, $y1);
    }
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $r * cos ( $PI / $per * $i);
	$y1 = $r * sin (-$PI / $per * $i) + $zl;
	&sub_print($xl, $x1, $y1);
    }
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $r * cos ($PI / $per * $i);
	$y1 = $r * sin ($PI / $per * $i) + $zh;
	&sub_print($xh, $x1, $y1);
	&sub_print($xl, $x1, $y1);
	$x2 = $r * cos ($PI / $per * ($i + 1));
	$y2 = $r * sin ($PI / $per * ($i + 1)) + $zh;
	&sub_print($xl, $x2, $y2);
	&sub_print($xh, $x2, $y2);
	print sz "endf\n#\n";
    }
    print sz "face\n";
    &sub_print($xh, $yl, $zh);
    &sub_print($xl, $yl, $zh);
    &sub_print($xl, $yl, $zl);
    &sub_print($xh, $yl, $zl);
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $r * cos ($PI / $per * $i + $PI);
	$y1 = $r * sin ($PI / $per * $i + $PI) + $zl;
	&sub_print($xh, $x1, $y1);
	&sub_print($xl, $x1, $y1);
	$x2 = $r * cos ($PI / $per * ($i + 1) + $PI);
	$y2 = $r * sin ($PI / $per * ($i + 1) + $PI) + $zl;
	&sub_print($xl, $x2, $y2);
	&sub_print($xh, $x2, $y2);
	print sz "endf\n#\n";
    }
    print sz "face\n";
    &sub_print($xh, $yh, $zl);
    &sub_print($xl, $yh, $zl);
    &sub_print($xl, $yh, $zh);
    &sub_print($xh, $yh, $zh);
    print sz "endf\n#\n";
}

sub make_koban_hemicylinder {
    local ($xl, $xh, $yl, $yh, $zl, $zh, $r, $x1, $x2, $y1, $y2, $head, $i);
    $xl  = -$x_length / 2;
    $xh  =  $x_length / 2;
    $yl  = -$y_length / 2;
    $yh  =  $y_length / 2;
    $r   =  $y_length / 2;
    $zl  = -$z_length / 2 + $r;
    $zh  =  $z_length / 2 - $r;
    $per = int($per / 2);
    $head =<<"EO2";
#
#   koban hemicylinder center ($x_center, $y_center, $z_center)
#            radius ($radius), height ($height)
#
EO2
    print sz "$head#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $r * cos ($PI / $per * $i);
	$y1 = $r * sin ($PI / $per * $i) + $zh;
	&sub_print($xh, $x1, $y1);
    }
    &sub_print($xh, $yl, 0.0)
    &sub_print($xh, $yh, 0.0);
    print sz "endf\n#\nface\n";
    for ($i = 0; $i <= $per; $i++) {
	$x1 = $r * cos ( $PI / $per * $i - $PI);
	$y1 = $r * sin (-$PI / $per * $i - $PI) + $zh;
	&sub_print($xl, $x1, $y1);
    }
    &sub_print($xl, $yh, 0.0)
    &sub_print($xl, $yl, 0.0);
    print sz "endf\n#\n";
    for ($i = 0; $i < $per; $i++) {
	print sz "face\n";
	$x1 = $r * cos ($PI / $per * $i);
	$y1 = $r * sin ($PI / $per * $i) + $zh;
	&sub_print($xh, $x1, $y1);
	&sub_print($xl, $x1, $y1);
	$x2 = $r * cos ($PI / $per * ($i + 1));
	$y2 = $r * sin ($PI / $per * ($i + 1)) + $zh;
	&sub_print($xl, $x2, $y2);
	&sub_print($xh, $x2, $y2);
	print sz "endf\n#\n";
    }
    print sz "face\n";
    &sub_print($xh, $yl, $zh);
    &sub_print($xl, $yl, $zh);
    &sub_print($xl, $yl, 0.0);
    &sub_print($xh, $yl, 0.0);
    print sz "endf\n#\nface\n";
    &sub_print($xh, $yh, 0.0);
    &sub_print($xh, $yl, 0.0);
    &sub_print($xl, $yl, 0.0);
    &sub_print($xl, $yh, 0.0);
    print sz "endf\n#\nface\n";
    &sub_print($xh, $yh, 0.0);
    &sub_print($xl, $yh, 0.0);
    &sub_print($xl, $yh, $zh);
    &sub_print($xh, $yh, $zh);
    print sz "endf\n#\n";
}

$menu =<< 'EOM';
 1. 長方体
 2. 円柱
 3. 半円柱
 4. 楕円柱
 5. 半楕円柱
 6. 小判柱
 7. 半小判柱
 8. 球
 9. 半球
10. 円錐 (正多角錐)
11. 円錐台
12. ドーナツ
 0. quit
EOM

die "makefaces [filename] " if (@ARGV != 1);

if (-e $ARGV[0]) {
    print "$ARGV[0] exist. Overwrite ? (y/other) ";
    $_ = <STDIN>;
    die if (!(/Y/ || /y/));
}

for ($inp = -1; $inp < 0 || $inp > 11;) {
    print "$menu *** select -> " ;
    $inp = <STDIN>;
    chop ($inp);
}

open (sz, ">$ARGV[0]");
if ($inp == 1) {
    print "make faces of rectanglar.\n";
    &input_rectangular();
    &make_rectangular();
} elsif ($inp == 2) {
    print "make faces of cylinder.\n";
    &input_cylinder();
    &make_cylinder();
} elsif ($inp == 3) {
    print "make faces of hemicylinder.\n";
    &input_cylinder();
    &make_hemicylinder();
} elsif ($inp == 4) {
    print "make faces of elliptic cylinder.\n";
    &input_elliptic_cylinder();
    &make_elliptic_cylinder();
} elsif ($inp == 5) {
    print "make faces of elliptic hemicylinder.\n";
    &input_elliptic_cylinder();
    &make_elliptic_hemicylinder();
} elsif ($inp == 6) {
    print "make faces of koban cylinder.\n";
    &input_koban_cylinder();
    &make_koban_cylinder();
} elsif ($inp == 7) {
    print "make faces of koban cylinder.\n";
    &input_koban_cylinder();
    &make_koban_hemicylinder();
} elsif ($inp == 8) {
    print "make faces of sphere.\n";
    &input_sphere();
    &make_sphere();
} elsif ($inp == 9) {
    print "make faces of hemisphere.\n";
    &input_sphere();
    &make_hemisphere();
} elsif ($inp == 10) {
    print "make faces of cone.\n";
    &input_cylinder();
    &make_cone();
} elsif ($inp == 11) {
    print "make faces of truncated corn.\n";
    &input_truncated_corn();
    &make_truncated_corn();
} elsif ($inp == 12) {
    print "make faces of doughnut.\n";
    &input_doughnut();
    &make_doughnut();
}
close (sz);
